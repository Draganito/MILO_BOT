# parabolic_sar.script
# Dokumentation:
# Dieses Script berechnet Parabolic SAR: Trend-Indikator mit Acceleration Factor.
# Einstellung: coin = "Symbol" (z.B. BTCUSDT), timeframe = "Intervall" (z.B. 1h).
# Condition: Long, wenn Close > SAR (Uptrend).
# Action: donothing (Testmodus).
# Variablen: data (Kerzen-List), lastclose (aktueller Close).
# Nutzen: Trailing-Stop für Trends, Switch bei Umkehr.
# Risiken: Viele Whipsaws in Range-Märkten.
# Berechnung: Start mit Initial SAR/EP, update AF bei Extremen.
coin = "BTCUSDT"
timeframe = "1h"

def calculate_parabolic_sar(data, af_step=0.015, af_max=0.2):
    if len(data) < 2:
        return [math.nan] * len(data)
    sar = [data[0]["low"]]
    ep = data[0]["high"]
    af = 0.015
    trend = 1  # 1 = up, -1 = down
    for i in range(1, len(data)):
        prev_sar = sar[-1]
        if trend > 0:
            sar_val = prev_sar + af * (ep - prev_sar)
            if data[i]["low"] < sar_val:
                trend = -1
                sar_val = ep
                ep = data[i]["low"]
                af = 0.015
            else:
                if data[i]["high"] > ep:
                    ep = data[i]["high"]
                    af = min(af + af_step, af_max)
        else:
            sar_val = prev_sar - af * (prev_sar - ep)
            if data[i]["high"] > sar_val:
                trend = 1
                sar_val = ep
                ep = data[i]["high"]
                af = 0.015
            else:
                if data[i]["low"] < ep:
                    ep = data[i]["low"]
                    af = min(af + af_step, af_max)
        sar.append(sar_val)
    return sar
    
sar = calculate_parabolic_sar(data)
condition_true = lastclose > sar[-1]
action_if_true = "donothing"
print(f"Parabolic SAR: {sar[-1]:.4f}")